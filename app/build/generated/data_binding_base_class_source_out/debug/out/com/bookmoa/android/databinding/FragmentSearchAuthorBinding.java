// Generated by view binder compiler. Do not edit!
package com.bookmoa.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bookmoa.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSearchAuthorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout searchAuthorAvailable;

  @NonNull
  public final Button searchAuthorBtn;

  @NonNull
  public final ConstraintLayout searchAuthorNotAvailable;

  @NonNull
  public final RecyclerView searchAuthorRv;

  @NonNull
  public final TextView searchAuthorTv;

  private FragmentSearchAuthorBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout searchAuthorAvailable, @NonNull Button searchAuthorBtn,
      @NonNull ConstraintLayout searchAuthorNotAvailable, @NonNull RecyclerView searchAuthorRv,
      @NonNull TextView searchAuthorTv) {
    this.rootView = rootView;
    this.searchAuthorAvailable = searchAuthorAvailable;
    this.searchAuthorBtn = searchAuthorBtn;
    this.searchAuthorNotAvailable = searchAuthorNotAvailable;
    this.searchAuthorRv = searchAuthorRv;
    this.searchAuthorTv = searchAuthorTv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchAuthorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchAuthorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search_author, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchAuthorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.search_author_available;
      ConstraintLayout searchAuthorAvailable = ViewBindings.findChildViewById(rootView, id);
      if (searchAuthorAvailable == null) {
        break missingId;
      }

      id = R.id.search_author_btn;
      Button searchAuthorBtn = ViewBindings.findChildViewById(rootView, id);
      if (searchAuthorBtn == null) {
        break missingId;
      }

      id = R.id.search_author_not_available;
      ConstraintLayout searchAuthorNotAvailable = ViewBindings.findChildViewById(rootView, id);
      if (searchAuthorNotAvailable == null) {
        break missingId;
      }

      id = R.id.search_author_rv;
      RecyclerView searchAuthorRv = ViewBindings.findChildViewById(rootView, id);
      if (searchAuthorRv == null) {
        break missingId;
      }

      id = R.id.search_author_tv;
      TextView searchAuthorTv = ViewBindings.findChildViewById(rootView, id);
      if (searchAuthorTv == null) {
        break missingId;
      }

      return new FragmentSearchAuthorBinding((ConstraintLayout) rootView, searchAuthorAvailable,
          searchAuthorBtn, searchAuthorNotAvailable, searchAuthorRv, searchAuthorTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
